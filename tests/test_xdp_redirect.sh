#!/bin/bash
# Create 2 namespaces with two veth peers, and
# forward packets in-between using generic XDP
#
# NS1(veth11)     NS2(veth22)
#     |               |
#     |               |
#   (veth1) ------ (veth2)   
#     | xdp forwarding |
#     ------------------
#
# The xdp[0-9]*.p4 is attached to veth1
# ifindex:
# veth1=111, veth2=222
#
set -e
set -x

function cleanup {
	set +e
	ip link set dev veth1 xdpgeneric off
	ip link set dev veth2 xdpgeneric off
	ip netns show
	ip netns del ns1
	ip netns del ns2
	ip link set dev br000 down || true
	brctl delbr br000 || true
#	rm -f /sys/fs/bpf/xdp/globals/*
	exit 0
}

trap cleanup 0 2 3 9

function ns_config {
	ip netns add ns1
	ip netns add ns2

	ip link add veth1 index 111 type veth peer name veth11
	ip link add veth2 index 222 type veth peer name veth22

	ip link set veth11 netns ns1
	ip link set veth22 netns ns2

	ip link set veth1 up
	ip link set veth2 up

	ip netns exec ns1 ip addr add 10.1.1.11/24 dev veth11
	ip netns exec ns1 ip link set address 10:1c:29:80:11:11 dev veth11
	ip netns exec ns1 ip neighbor add 10.1.1.22 lladdr 20:2c:29:80:22:22 dev veth11

	ip netns exec ns2 ip addr add 10.1.1.22/24 dev veth22
	ip netns exec ns2 ip link set address 20:2c:29:80:22:22 dev veth22
	ip netns exec ns2 ip neighbor add 10.1.1.11 lladdr 10:1c:29:80:11:11 dev veth22

	ip netns exec ns1 ip link set dev veth11 up
	ip netns exec ns2 ip link set dev veth22 up
}

function config_bridge {
	brctl addbr br000
	ip link set dev br000 up
	brctl addif br000 veth1
	brctl addif br000 veth2

	# without having xdp loaded
	ip netns exec ns1 ping -c 2 10.1.1.22
	ip netns exec ns2 ping -c 2 10.1.1.11
}

ns_config
config_bridge

# load XDP generated by P4C-XDP
ip link set dev veth1 xdpgeneric obj $1

ip netns exec ns1 ping -c 3 10.1.1.22
ip netns exec ns2 ping -c 3 10.1.1.11

echo "*** PASS ***"
exit 0
